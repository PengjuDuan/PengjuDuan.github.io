<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>段鹏举的博客</title>
  
  <subtitle>自由源于自信,自信源于自律!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/PengjuDuan/"/>
  <updated>2017-11-22T17:15:29.535Z</updated>
  <id>https://github.com/PengjuDuan/</id>
  
  <author>
    <name>段鹏举</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pomelo 教程 ---- connector组件源码深度解析</title>
    <link href="https://github.com/PengjuDuan/2017/11/22/Pomelo-%E6%95%99%E7%A8%8B-connector%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/PengjuDuan/2017/11/22/Pomelo-教程-connector组件源码深度解析/</id>
    <published>2017-11-22T12:48:42.000Z</published>
    <updated>2017-11-22T17:15:29.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-组件分析"><a href="#1-组件分析" class="headerlink" title="1. 组件分析"></a>1. 组件分析</h2><h3 id="1-1-什么是connector"><a href="#1-1-什么是connector" class="headerlink" title="1.1 什么是connector?"></a>1.1 什么是connector?</h3><p>connector其实就是Pomelo中的一个组件，俗称<code>前端服务器</code>，官方文档中的解释：</p><blockquote><p>connector服务器接收客户端的连接请求，创建与客户端的连接，维护客户端的session信息。同时，接收客户端对后端服务器的请求，按照用户配置的路由策略，将请求路由给具体的后端服务器。当后端服务器处理完请求或者需要给客户端推送消息的时候，connector服务器同样会扮演一个中间角色，完成对客户端的消息发送。connector服务器会同时拥有clientPort和port，其中clientPort用来监听客户端的连接，port端口用来给后端提供服务。</p></blockquote><p>由此可见，connector组件在pomelo中主要提供的功能有：</p><ul><li><strong>负责客户端连接</strong>：包含创建连接、维护连接、断开连接等；</li><li><strong>处理请求与响应</strong>：把客户端的请求转发到后端服务器，把后端服务器的消息推送到客户端；</li></ul><h3 id="1-2-为什么要使用connector？"><a href="#1-2-为什么要使用connector？" class="headerlink" title="1.2 为什么要使用connector？"></a>1.2 为什么要使用connector？</h3><p>笔者有过使用socket.io自己搭建实时应用的经历，那时我把连接和业务逻辑处理的代码写在一起，虽然也能工作，但却不容易拓展。pomelo的一个核心思想就是<code>分布式</code>，把前端服务器（connector组件）与后端服务器（server组件）分开，connector只负责连接，server只负责请求的处理，这样比起前者有了诸多优势：</p><ul><li><strong>易拓展</strong>：前端服务器可以在数量上、连接方式上任意拓展；后端服务器由于只根据输入提供输出，使用场景也不仅限于connector上了，有兴趣的朋友也可以看一下<a href="https://help.aliyun.com/product/50980.html" target="_blank" rel="noopener">函数计算</a>。</li><li><strong>热更新</strong>：由于前、后端服务器实是在不同的进程之间，当我对后端服务器进行更新时（热更新机制后文会详细讲解），即使是重启进程，也不影响客户端的连接；</li><li><strong>逻辑分区</strong>：恰当的分配前、后端服务器，便可以实现逻辑上对用户分区而非物理分区。</li></ul><h3 id="1-2-如何使用connector？"><a href="#1-2-如何使用connector？" class="headerlink" title="1.2 如何使用connector？"></a>1.2 如何使用connector？</h3><p>使用connector的方式是非常简单的，只需要在servers.json文件中定义<code>clientPort</code>与<code>frontend</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"connector"</span>: [</span><br><span class="line">  &#123;<span class="string">"id"</span>: <span class="string">"connector-server-1"</span>, <span class="string">"host"</span>: <span class="string">"127.0.0.1"</span>, <span class="string">"port"</span>: <span class="number">3050</span>, <span class="string">"clientPort"</span>: <span class="number">3090</span>, <span class="string">"frontend"</span>: <span class="literal">true</span>, <span class="string">"args"</span>:<span class="string">"--inspect=9002"</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"id"</span>: <span class="string">"connector-server-2"</span>, <span class="string">"host"</span>: <span class="string">"127.0.0.1"</span>, <span class="string">"port"</span>: <span class="number">3051</span>, <span class="string">"clientPort"</span>: <span class="number">3091</span>, <span class="string">"frontend"</span>: <span class="literal">true</span>, <span class="string">"args"</span>:<span class="string">"--inspect=9003"</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后在app.js中配置一下connector，那么在pomelo启动时就会加载这两个前端服务器<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.configure(<span class="string">'production|development'</span>, <span class="string">'connector'</span>, () =&gt; &#123;</span><br><span class="line">    app.set(<span class="string">'connectorConfig'</span>,&#123;</span><br><span class="line">        connector: pomelo.connectors.hybridconnector,</span><br><span class="line">        heartbeat: <span class="number">10</span>,</span><br><span class="line">        useDict: <span class="literal">true</span>,</span><br><span class="line">        useProtobuf: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>本文要着重讲解就是<code>pomelo.connectors.hybridconnector</code>这项配置，这段代码指定了此前端服务器与客户端的连接方式，pomelo默认提供了<code>sioconnector</code>和<code>hybridconnector</code>两种连接方式，其中</p><ul><li><strong>sioconnector</strong>：支持基于socket.io的通讯协议，也是Pomelo框架默认采用的connector（主要是兼容老版本）；</li><li><strong>hybridconnector</strong>：支持socket和websocket，使用二进制通讯协议，并且支持route字典压缩和protobuf压缩；</li></ul><p>正如前文所说，connector很容易在数量和连接方式上拓展，那么当你需要时就可以自己写一个connecotr出来。在做这件事情之前，让我们先来分析一下connector的源码。</p><h2 id="2-connector源码分析"><a href="#2-connector源码分析" class="headerlink" title="2. connector源码分析"></a>2. connector源码分析</h2><h3 id="2-1-connector初始化与启动"><a href="#2-1-connector初始化与启动" class="headerlink" title="2.1 connector初始化与启动"></a>2.1 connector初始化与启动</h3><p>connector组件初始化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.connector = getConnector(app, opts);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (opts.useDict) &#123;</span><br><span class="line">    app.load(pomelo.dictionary, app.get(<span class="string">'dictionaryConfig'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (opts.useProtobuf) &#123;</span><br><span class="line">    app.load(pomelo.protobuf, app.get(<span class="string">'protobufConfig'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这三行代码对应着app.js里面的配置，而<code>getConnector</code>方法会根据配置加载pomelo内置的<code>hybridconnector</code>或<code>sioconnector</code>实例。</p><p>connector组件启动<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pro.afterStart = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.connector.start(cb);</span><br><span class="line">  <span class="keyword">this</span>.connector.on(<span class="string">'connection'</span>, hostFilter.bind(<span class="keyword">this</span>, bindEvents));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>其实就是调用了<code>this.connector</code>上的<code>start</code>方法和调用<code>bindEvents</code>方法绑定一些事件，同时生成一个session（关于session相关的信息解读将在后续的博客中讲解）。</p><p>那么以<code>hybridconnector</code>为例，我们接着往下看。</p><p>hybridconnector.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Connector.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> gensocket = <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hybridsocket = <span class="keyword">new</span> HybridSocket(curId++, socket);</span><br><span class="line">    hybridsocket.on(<span class="string">'handshake'</span>, self.handshake.handle.bind(self.handshake, hybridsocket));</span><br><span class="line">    hybridsocket.on(<span class="string">'heartbeat'</span>, self.heartbeat.handle.bind(self.heartbeat, hybridsocket));</span><br><span class="line">    hybridsocket.on(<span class="string">'disconnect'</span>, self.heartbeat.clear.bind(self.heartbeat, hybridsocket.id));</span><br><span class="line">    hybridsocket.on(<span class="string">'closing'</span>, Kick.handle.bind(<span class="literal">null</span>, hybridsocket));</span><br><span class="line">    self.emit(<span class="string">'connection'</span>, hybridsocket);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  ... </span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.switcher.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    gensocket(socket);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>hybridsocket.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(msg) &#123;</span><br><span class="line">    msg = Package.decode(msg);</span><br><span class="line">    handler(self, msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关于<code>switcher</code>暂时可以简单的理解为<code>websocket</code>的连接,可以看出来每当一个连接建立时，都<code>new</code>了一个<code>HybridSocket</code>出来。之后，当实例<code>hybridsocket</code>监听到<code>message</code>事件后，也就是接收到了前端发来的请求时，就进入到了pomelo的<code>处理链</code>中。</p><h3 id="2-2-connector处理请求的过程即处理链"><a href="#2-2-connector处理请求的过程即处理链" class="headerlink" title="2.2 connector处理请求的过程即处理链"></a>2.2 connector处理请求的过程即处理链</h3><p>继续查看<code>hybridsocket.js</code>与<code>handler.js</code>，不难发现，请求的整个处理过程大致分为以下几个步骤:</p><ol><li><p><strong>收到消息解码</strong>：调用<code>hybridsocket.js</code>上的<code>decode</code>方法，把socket传过来的消息，解码为如下json格式</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    id: xx, <span class="comment">// 请求的id</span></span><br><span class="line">    route: xx, <span class="comment">// 请求的后端服务器路由</span></span><br><span class="line">    body: xx, <span class="comment">// 请求体</span></span><br><span class="line">    type: <span class="number">0</span>, <span class="comment">// 请求类型</span></span><br><span class="line">    compressRoute: <span class="number">0</span>, <span class="comment">// 路由压缩</span></span><br><span class="line">    compressGzip: <span class="number">0</span>, <span class="comment">// gzip压缩</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>计算对应的后端服务器</strong>： 根据session和第1步解码后的消息<code>dispatch</code>计算出<strong>对应的一个</strong>后端服务器，然后发起rpc，传过去session的拷贝和解码后的消息进行调用。</p></li><li><strong>发送消息编码</strong>：调用<code>hybridsocket.js</code>上的<code>encode</code>方法，把后端服务器的返回值编码。</li><li><strong>发送消息</strong>: 调用<code>socket.send</code>方法把编码后的消息发送给客户端。</li></ol><h3 id="2-3-connector组件源码简单总结"><a href="#2-3-connector组件源码简单总结" class="headerlink" title="2.3 connector组件源码简单总结"></a>2.3 connector组件源码简单总结</h3><ol><li>在connector组件中加载<code>hybridconnector</code>的实例，获取引用；</li><li>connector组件启动时调用<code>hybridconnector.start</code>,监听来自客户端的连接；</li><li>每当有新的连接时<code>new</code>一个<code>websocket</code>实例，监听客户端的请求</li><li>收到客户端请求时，讲消息解码</li><li>计算对应的后端服务器，并调用获取返回值</li><li>对后端服务器的返回值编码</li><li>调用<code>socket.send</code>方法将编码后的消息发送给客户端</li></ol><p>相信读到这里，想自定义一个connector已经不是什么难事了，未完待续。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-组件分析&quot;&gt;&lt;a href=&quot;#1-组件分析&quot; class=&quot;headerlink&quot; title=&quot;1. 组件分析&quot;&gt;&lt;/a&gt;1. 组件分析&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是connector&quot;&gt;&lt;a href=&quot;#1-1-什么是connec
      
    
    </summary>
    
      <category term="Pomelo" scheme="https://github.com/PengjuDuan/categories/Pomelo/"/>
    
    
      <category term="Pomelo" scheme="https://github.com/PengjuDuan/tags/Pomelo/"/>
    
      <category term="教程" scheme="https://github.com/PengjuDuan/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Nodejs" scheme="https://github.com/PengjuDuan/tags/Nodejs/"/>
    
  </entry>
  
</feed>
